#include "physcon.h"
#include "gr.h"

using namespace bssn;


/*----------------------------------------------------------------------
 *
 * vector form of RHS
 *
 *----------------------------------------------------------------------*/
void physical_constraints(double **uZipConVars, const double **uZipVars,
                          const unsigned int& offset,
                          const double *pmin, const double *pmax,
                          const unsigned int *sz, const unsigned int& bflag)
{

    const unsigned int nx = sz[0];
    const unsigned int ny = sz[1];
    const unsigned int nz = sz[2];
    const unsigned int n = nx * ny * nz;

    double hx = (pmax[0] - pmin[0]) / (nx - 1);
    double hy = (pmax[1] - pmin[1]) / (ny - 1);
    double hz = (pmax[2] - pmin[2]) / (nz - 1);

    double *ham = &uZipConVars[VAR_CONSTRAINT::C_HAM][offset];
    double *mom0 = &uZipConVars[VAR_CONSTRAINT::C_MOM0][offset];
    double *mom1 = &uZipConVars[VAR_CONSTRAINT::C_MOM1][offset];
    double *mom2 = &uZipConVars[VAR_CONSTRAINT::C_MOM2][offset];
    double *psi4_real = &uZipConVars[VAR_CONSTRAINT::C_PSI4_REAL][offset];
    double *psi4_img = &uZipConVars[VAR_CONSTRAINT::C_PSI4_IMG][offset];

    const double *alpha = &uZipVars[VAR::U_ALPHA][offset];
    const double *chi = &uZipVars[VAR::U_CHI][offset];
    const double *K = &uZipVars[VAR::U_K][offset];
    const double *gt0 = &uZipVars[VAR::U_SYMGT0][offset];
    const double *gt1 = &uZipVars[VAR::U_SYMGT1][offset];
    const double *gt2 = &uZipVars[VAR::U_SYMGT2][offset];
    const double *gt3 = &uZipVars[VAR::U_SYMGT3][offset];
    const double *gt4 = &uZipVars[VAR::U_SYMGT4][offset];
    const double *gt5 = &uZipVars[VAR::U_SYMGT5][offset];
    const double *beta0 = &uZipVars[VAR::U_BETA0][offset];
    const double *beta1 = &uZipVars[VAR::U_BETA1][offset];
    const double *beta2 = &uZipVars[VAR::U_BETA2][offset];
    const double *At0 = &uZipVars[VAR::U_SYMAT0][offset];
    const double *At1 = &uZipVars[VAR::U_SYMAT1][offset];
    const double *At2 = &uZipVars[VAR::U_SYMAT2][offset];
    const double *At3 = &uZipVars[VAR::U_SYMAT3][offset];
    const double *At4 = &uZipVars[VAR::U_SYMAT4][offset];
    const double *At5 = &uZipVars[VAR::U_SYMAT5][offset];
    const double *Gt0 = &uZipVars[VAR::U_GT0][offset];
    const double *Gt1 = &uZipVars[VAR::U_GT1][offset];
    const double *Gt2 = &uZipVars[VAR::U_GT2][offset];
    const double *B0 = &uZipVars[VAR::U_B0][offset];
    const double *B1 = &uZipVars[VAR::U_B1][offset];
    const double *B2 = &uZipVars[VAR::U_B2][offset];


//constraint deriv mem alloc
    /*[[[cog
    import cog
    import bssnDerivs as bssnDerivs

    for deriv in bssnDerivs.FUNC_CONS:
        cog.outl("\t double* "+deriv+" = (double*)malloc(sizeof(double)*n);")

    ]]]*/
//[[[end]]]

//compute constraint derivs.
    /*[[[cog
    import cog
    import bssnDerivs as bssnDerivs

    for var in bssnDerivs.CONSTRAINT_D:
        cog.outl("\t deriv_x(%s, %s, hx, sz, bflag);" %(bssnDerivs.PREFIX_D[0] + var ,var))
        cog.outl("\t deriv_y(%s, %s, hx, sz, bflag);" %(bssnDerivs.PREFIX_D[1] + var ,var))
        cog.outl("\t deriv_z(%s, %s, hx, sz, bflag);" %(bssnDerivs.PREFIX_D[2] + var ,var))

        if var in bssnDerivs.CONSTRAINT_D:
            cog.outl("\t deriv_xx(%s, %s, hx, sz, bflag);" %(bssnDerivs.PREFIX_DD[0] + var ,var))
            cog.outl("\t deriv_y(%s, %s, hx, sz, bflag);" %(bssnDerivs.PREFIX_DD[1] + var , bssnDerivs.PREFIX_D[0] + var ))
            cog.outl("\t deriv_z(%s, %s, hx, sz, bflag);" %(bssnDerivs.PREFIX_DD[2] + var , bssnDerivs.PREFIX_D[0] + var ))

            cog.outl("\t deriv_yy(%s, %s, hx, sz, bflag);" %(bssnDerivs.PREFIX_DD[3] + var ,var))
            cog.outl("\t deriv_z(%s, %s, hx, sz, bflag);" %(bssnDerivs.PREFIX_DD[4] + var , bssnDerivs.PREFIX_D[1] + var))

            cog.outl("\t deriv_zz(%s, %s, hx, sz, bflag);" %(bssnDerivs.PREFIX_DD[5] + var ,var))



    ]]]*/
//[[[end]]]

// enforce hamiltonian and momentum constraints
    for (unsigned int k = 3; k < nz - 3; k++) {
        double z = pmin[2] + k*hz;
        for (unsigned int j = 3; j < ny - 3; j++) {
            double y = pmin[1] + j*hy;
            for (unsigned int i = 3; i < nx - 3; i++) {
                double x = pmin[0] + i*hx;
                unsigned int pp = i + nx * (j + ny * k);
//#include "physconeqs.cpp"
                /*[[[cog
                import dendro
                import constraints

                outs = [constraints.psi4_real, constraints.psi4_img, constraints.ham, constraints.mom]
                vnames = ['psi4_real', 'psi4_img', 'ham', 'mom']
                dendro.generate_cpu(outs, vnames, '[pp]')

                ]]]*/
//[[[end]]]

            }
        }
    }

// deallocate deriv memmory
    /*[[[cog
    import cog
    import bssnDerivs as bssnDerivs

    for deriv in bssnDerivs.FUNC_CONS:
        cog.outl("\t free(%s);" %(deriv))

    ]]]*/
//[[[end]]]

}
