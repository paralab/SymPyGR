import sys
from pathlib import Path
import argparse
import importlib
import shutil
import tempfile
import git

import dendrosym

dendrosym_version = "0.0.1"

__usage__ = f"""Usage:

Download, set-up, and prepare for building a Dendro project

        dendro-build [<options>] <python-config-file>

Description: This program helps set up entire Dendro projects
             in General Relativity and simpler numerical schemes.
             Simply provide the tool with a setup file and it will
             set up the current directory with everything needed to run.

Options:

  --force (-f)                  Force regeneration even if file hasn't changed
  --regenerate-parameters       Regenerate the parameter files
  --regenerate-rhs              Regenerate the RHS files only

Version:        {dendrosym_version}
Requires:       Python 3.6 or higher."""

_config_header = """### ======= DENDRO CONFIGURATION FILE =======
# This is a pre-generated file made by the DendroSym Command Line Interface
# and is used to help generate various parts of the final C++ program.
# DO NOT EDIT this file directly unless adding custom parameters for additions
# to the program (see the end of the file).
"""

_edit_str = "## ==== DO NOT EDIT THIS LINE OR ANYTHING ABOVE IT ===="
_edit_txt_and_instructions = (
    """# === IMPORTANT NOTE ABOUT THIS CONFIG FILE ===
# Everything above may be deleted or edited by the program whenever you call
# the generation script. To change anything above, modify the Python file originally used and rerun
# the generation.
    
# Past this point you can add in your own parameters that are not defined in your Python script.
# Follow the format above. To keep them in the project namespace, just add
# in a new parameter like the ones above. For example:
# [PROJECT_NAME]_MY_PARAMETER = { class = "variant", dtype = "double", desc = "" }
#
# To add another namespace create a new TOML dictionary header like so:
# [additional_parameters.<namespace_name>-NMSPC]
# then add a new parameter like the example above.

# NOTE: Deleting the next line may cause any custom additions to be deleted!

"""
    + _edit_str
)


def extract_user_additions(dendroconfig_file):
    with open(dendroconfig_file, "r") as f:
        whole_str = f.read()

    found_loc = whole_str.find(_edit_str)

    if found_loc == -1:
        print(
            "WARNING: could not find the DO NOT EDIT line in existing file. Will not save anything!"
        )
        return ""

    return whole_str.split(_edit_str)[-1]


def get_remote_head_hash(repo_url, branch):
    """Get the HEAD commit hash from a remote repository without cloning."""
    try:
        g = git.cmd.Git()
        # Get the remote HEAD reference
        head_ref = g.ls_remote(repo_url, heads=True).split("\n")
        for ref in head_ref:
            if branch in ref:
                return ref.split("\t")[0]
        return None
    except Exception:
        return None


def main():
    SOLVER_REPO_URL = "https://github.com/dfvankomen/dendrosolverbase.git"
    MAIN_BRANCH = "main"
    BETA_BRANCH = "beta"

    # === Set up Command Line Arguments ===
    parser = argparse.ArgumentParser(
        description="Dendro Generator Script", usage=__usage__
    )

    parser.add_argument("setup_file")
    parser.add_argument("-f", "--force", dest="force_generation", action="store_true")
    parser.add_argument("--beta", dest="use_beta_branch", action="store_true")

    args = parser.parse_args()

    # determine branch
    repo_branch = BETA_BRANCH if args.use_beta_branch else MAIN_BRANCH

    # ===== BEGIN ACTUAL SCRIPT =====
    cwd = Path.cwd()
    setup_file = cwd / args.setup_file
    dendroconfig_file = cwd / "dendro_config.toml"

    find_user_additions = False

    # see if the dendroconfig file exists
    if not args.force_generation and dendroconfig_file.exists():
        try:
            # if it does, read it in with tomlkit
            toml_data = dendrosym.utils.get_toml_data(dendroconfig_file)

            if toml_data["python_config_file"] != args.setup_file:
                print(
                    "It appears that code has been generated but for a different parameter"
                    + f' file "{toml_data["python_config_file"]}", which does not match "{args.setup_file}".'
                    + " To continue generating for this new file, please use the --force option."
                )
                sys.exit(1)

            # then calculate the sha of the file
            curr_config_hash = dendrosym.utils.calculate_sha256(setup_file)
            stored_config_hash = toml_data.get("config_file_hash")

            # check the Git commit hash as well
            stored_git_hash = toml_data.get("git_commit_hash_base")
            remote_head_hash = get_remote_head_hash(SOLVER_REPO_URL, repo_branch)

            if (
                curr_config_hash == stored_config_hash
                and remote_head_hash is not None
                and remote_head_hash == stored_git_hash
            ):
                print(
                    f'It appears code has already been generated for "{args.setup_file}" and the solver base repository is up to date with the remote. Exiting...'
                )
                sys.exit()
        except Exception as e:
            print(
                f"Warning: could not perform integrity checks on generation due to error: {e}"
            )

    # slower operations only if check succeeds
    current_commit_hash = None

    # check if a local git repository exists
    if not (cwd / ".git").is_dir():
        print(
            f"Cloning '{SOLVER_REPO_URL}' into the current directory (branch: '{repo_branch}')..."
        )

        with tempfile.TemporaryDirectory() as temp_dir:
            try:
                repo = git.Repo.clone_from(
                    SOLVER_REPO_URL, temp_dir, branch=repo_branch, depth=1
                )
                current_commit_hash = repo.head.commit.hexsha
                print(f"Successfully cloned from commit: {current_commit_hash}")

                temp_path = Path(temp_dir)
                for item in temp_path.iterdir():
                    if item.name == ".git":
                        continue

                    dest_path = cwd / item.name

                    if item.is_dir():
                        # Copy directory
                        if dest_path.exists():
                            shutil.rmtree(dest_path)
                        shutil.copytree(item, dest_path)
                    else:
                        # Copy file
                        shutil.copy2(item, dest_path)

            except git.GitCommandError as e:
                print(f"Git command failed: {e}")
                sys.exit(1)

    # TODO: update the repository's code from remote upstream

    # now load in dendroconf
    try:
        spec = importlib.util.spec_from_file_location("dendroconf", setup_file)
        dendroconf = importlib.util.module_from_spec(spec)
        sys.modules[spec.name] = dendroconf
        spec.loader.exec_module(dendroconf)
    except Exception as e:
        print(f"Error loading configuration from '{setup_file}': {e}")
        sys.exit(1)

    find_user_additions = False

    if dendroconfig_file.exists():
        toml_data = dendrosym.utils.get_toml_data(dendroconfig_file)
        if args.force_generation:
            print(
                f'It appears code has already been generated for "{args.setup_file}".\n'
                + "Everything will be force overwritten due to --force flag, but user additions will be identified.\n"
            )
            find_user_additions = True

    if find_user_additions:
        user_additions = extract_user_additions(dendroconfig_file)
    else:
        user_additions = "\n"

    output_dict = {"python_config_file": setup_file.name}

    output_dict.update(dendroconf.dendroConfigs.create_project_config(setup_file))

    # now we need to generate some of the parameter stuff]
    all_params = dendroconf.dendroConfigs.create_parameter_variable_config()

    # then remove the requirements and stick it inside our outdict
    output_dict.update(
        {"additional_parameters": {"requirements": all_params["requirements"]}}
    )
    all_params.pop("requirements", None)

    with open(dendroconfig_file, "w") as f:
        f.write(_config_header + "\n")
        f.write(dendrosym.utils.get_toml_string(output_dict))
        f.write("\n\n")
        f.write(
            dendrosym.utils.write_inline_toml_dicts(
                all_params["dsolve-NMSPC"], "additional_parameters.dsolve-NMSPC"
            )
        )
        f.write("\n\n")
        f.write(
            dendrosym.utils.write_inline_toml_dicts(
                all_params[dendroconf.dendroConfigs.project_name + "-NMSPC"],
                "additional_parameters."
                + dendroconf.dendroConfigs.project_name
                + "-NMSPC",
            )
        )
        f.write("\n\n")
        f.write(_edit_txt_and_instructions)
        f.write(user_additions)

    print(Path.cwd())

    # TODO: call all optimizations to the RHS if necessary

    # then try writing the RHS stuff to a file to save it
    dendroconf.dendroConfigs.save_all_rhs_to_pickle()

    # now we generate all of the small things

    # ...

    pass


if __name__ == "__main__":
    main()
